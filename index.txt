# 1 (лого) #

представление себя и сообщества
Для разогрева

> Для начала узнаем кто как деплоит

* ftp/rsync
* git checkout
* docker

> Кто как считает нужным деплоить

## 3 (Что такое артефакт)  ##

* метаданными могут быть как переменные окружения так и информация о версии и других параметры, которые важны для использования этого артефакта
Примеры артефактов - deb/rpm пакеты, docker образы, ISO образы и т.д.

## 4 (Для чего нужно) ##

В принципе больше всего выигрыша от использования артефактов у devops.
С точки зрения использования приложения основной плюс в том, что можно добавить защиту от модификации и производительности (APCu)

## 5 (Издержки) ##

## 6-9 (Как устроено) ##

1. Усложнение CI\CD

Естественно добавляется шаг публикации артефакта. Но хорошая новость в том, что он по сути заменяет 'git checkout' и 'composer install'

Кроме того необходимо проверять цельность артефакта и вероятнее всего использовать отдельное хранилище для артефактов

## кто использует ##

phar.io это экосистема наподобие packagist только для PHAR артефактов, работает немного странно.
Есть плагин для композера, которые предоставляют базовый функционал работы с PHAR

## Что есть готовое ##

Я не думаю что сейчас есть конкуренция среди этих решений в плане поставки набора инструментов для работы артефактами
Если посмотреть на то, как собираются артефакты перечисленных известных инструментов, то видно, что всё это решается локально, а не какой-то экосистемой или стандартами типа PSR

## 13 (пример проекта) ##

С использованием humbug/box

Посмотрите в репозиторий

